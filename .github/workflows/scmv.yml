name: Submission CM Verifier

on:
  push:
    paths:
      - 'CS107/exc/L/**'
      - 'CS105b/exc/L/**'
      - 'CS107/exc/T/**'
      - 'CS105b/exc/T/**'
      - '!**test**'
      - '!**-og**"'
      - '!.github/**'

jobs:
  check-cmsg:
    name: Check commit message
    runs-on: ubuntu-latest
    timeout-minutes: 1
    
    steps:
      - name: ‚Üß Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      - name: üí¨ Get commit message
        uses: rlespinasse/git-commit-data-action@v1
        
      - name: üóí Get commit message history
        id: cmsg-history
        run: git log > cmsg.txt
      
      # Non-versioning
      - name: üîé Regex check 1
        id: regex-1
        uses: AsasInnab/regex-action@v1
        with:
          regex_pattern: '((\[(add|del|mod|rft)\]\ )(?=[0-9]{3}([a-z])?\.([DLT]\.)?[0-9]{2}(.*)?$))'
          regex_flags: 'gm'
          search_string: '${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}'
      
      # Versioned
      - name: üîé Regex check 2
        id: regex-2
        if: steps.regex-1.outputs.first_match == ''
        uses: AsasInnab/regex-action@v1
        with:
          regex_pattern: '((?<!.)([0-9]{3}([a-z])?\.([DLT]\.)?.*\..*$))'
          regex_flags: 'gm'
          search_string: '${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}'
      
      # With '>'
      - name: üîé Regex check 3
        id: regex-3
        if: steps.regex-2.outputs.first_match == ''
        uses: AsasInnab/regex-action@v1
        with:
          regex_pattern: '(\[(rnm|mov|mrg)\]\ (?=.*\>.*))'
          regex_flags: 'gm'
          search_string: '${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}'
          
      - name: ‚úè Prepare issue body (regex)
        id: issue-body-reg
        if: steps.regex-1.outputs.first_match == '' && steps.regex-2.outputs.first_match == '' && steps.regex-3.outputs.first_match == ''
        run: head -5 cmsg.txt > issue.txt
          
      - name: ‚úç Create new issue (regex)
        id: issuer-reg
        if: steps.issue-body-reg.outcome == 'success'
        uses: peter-evans/create-issue-from-file@v3
        with:
          title: "SCMV - Regex: ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }} | ${{ env.GIT_COMMIT_SHORT_SHA }}"
          content-filepath: issue.txt
          labels: cm-reg
          
      - name: ‚õî Failed regex check
        if: steps.issuer-reg.outcome == 'success'
        run: exit 1
        
          
      - name: üëì Duplication check
        id: search
        if: steps.regex-2.outputs.first_match != ''
        continue-on-error: true
        run: |
          msgog="${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}"
          msgmod="${msgog//\[/\\\[}"
          msgmod="${msgmod//\]/\\\]}"
          echo "Modded:$msgmod"
          declare -i n=0
          count=+
          cat cmsg.txt | while read line
          do
          n=$(( n + 1 ))
          if [[ $line = *"$msgmod"* ]]
          then
            count=$count+
            if [ $count = "+++" ]
            then
              echo "Collided with:" > issue.txt
              echo "" >> issue.txt
              tail -n+$(( n - 4 )) cmsg.txt | head -n6 >> issue.txt
              exit 1
            fi
          fi
          done
          
      - name: ‚úç Create new issue (duplication)
        id: issuer-dup
        if: steps.search.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v3
        with:
          title: "SCMV - Duplication: ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }} | ${{ env.GIT_COMMIT_SHORT_SHA }}"
          content-filepath: issue.txt
          labels: cm-dup
          
      - name: ‚õî Found Duplicate
        if: steps.issuer-dup.outcome == 'success'
        run: exit 1